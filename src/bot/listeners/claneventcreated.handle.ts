import { Injectable } from '@nestjs/common';
import { OnEvent } from '@nestjs/event-emitter';
import { InjectRepository } from '@nestjs/typeorm';
import { BaseHandleEvent } from './base.handle';
import { MezonClientService } from 'src/mezon/services/client.service';
import { EMarkdownType, Events } from 'mezon-sdk';
import { IsNull, MoreThan, Not, Repository } from 'typeorm';
import { BetEventMezon, EventMezon, User } from '../models';
import {
  BetStatus,
  EmbedProps,
  EMessageMode,
  MEZON_EMBED_FOOTER,
  MEZON_IMAGE_URL,
} from '../constants/configs';
import { MessageQueue } from '../services/messageQueue.service';
import { ReplyMezonMessage } from '../asterisk-commands/dto/replyMessage.dto';

@Injectable()
export class EventClanEventCreated extends BaseHandleEvent {
  constructor(
    clientService: MezonClientService,
    @InjectRepository(EventMezon)
    private eventMezonRepository: Repository<EventMezon>,
    private messageQueue: MessageQueue,
    @InjectRepository(BetEventMezon)
    private betEventMezonRepository: Repository<BetEventMezon>,
    @InjectRepository(User)
    private userRepository: Repository<User>,
  ) {
    super(clientService);
  }

  @OnEvent(Events.ClanEventCreated)
  async handleClanEventCreated(data) {
    try {
      if (data.event_status === 'CREATED') {
        const EventMezonData = new EventMezon();
        EventMezonData.id = data.event_id;
        EventMezonData.logo = data.logo;
        EventMezonData.address = data.address;
        EventMezonData.clandId = data.clan_id;
        EventMezonData.channelId = data.channel_id;
        EventMezonData.timeStart = new Date(data.start_time).getTime();
        EventMezonData.timeEnd = new Date(data.end_time).getTime();
        EventMezonData.activeBet = true;
        EventMezonData.title = data.title;
        EventMezonData.description = data.description;

        await this.eventMezonRepository.insert(EventMezonData);
        const embed: EmbedProps[] = [
          {
            color: '#ef0707',
            title: `Event ${data.title} has been created. Let's get some fun together!`,
            // url: 'https://discord.js.org',
            author: {
              name: 'KOMU',
              icon_url: MEZON_IMAGE_URL,
              url: MEZON_IMAGE_URL,
            },
            description:
              'ƒêo√°n xem s·ªë ng∆∞·ªùi ƒë√£ tham gia t·∫°i th·ªùi ƒëi·ªÉm event opentalk k·∫øt th√∫c!!!',
            thumbnail: {
              url: MEZON_IMAGE_URL,
            },
            fields: [
              {
                name: '‚Ä¢ C√°ch ch∆°i',
                value: `Ng∆∞·ªùi tham gia s·∫Ω s·ª≠ d·ª•ng c√¢u l·ªánh \n*bet ${data.event_id} user_number\nƒë·ªÉ tham gia BET cho event opentalk n√†y\nV√≠ d·ª•: *bet ${data.event_id} 70\nKOMU s·∫Ω g·ª≠i cho b·∫°n 1 message v√† nhi·ªám v·ª• c·ªßa b·∫°n l√† x√°c nh·∫≠n v√† chuy·ªÉn s·ªë l∆∞·ª£ng token mu·ªën BET cho KOMU. Khi th·ªùi gian c·ªßa event opentalk m√† b·∫°n BET k·∫øt th√∫c, KOMU s·∫Ω g·ª≠i k·∫øt qu·∫£ s·ªë l∆∞·ª£ng ng∆∞·ªùi k·∫øt th√∫c c·ªßa event opentalk ƒë√≥ t·∫°i channel BET.`,
              },
              {
                name: '‚Ä¢ Lu·∫≠t l·ªá',
                value:
                  '- KOMU s·∫Ω nh·∫≠n BET b·∫Øt ƒë·∫ßu t·ª´ L√öC N√ÄY v√† ng∆∞ng nh·∫≠n sau khi event opentalk b·∫Øt ƒë·∫ßu.\n- C√≥ th·ªÉ BET nhi·ªÅu l·∫ßn cho 1 event opentalk.\n- C√≥ th·ªÉ BET nhi·ªÅu event opentalk trong th·ªùi gian cho ph√©p.',
              },
              {
                name: '‚Ä¢ Ti·ªÅn th∆∞·ªüng',
                value: `N·∫øu b·∫°n ƒëo√°n ƒë√∫ng, KOMU s·∫Ω g·ª≠i cho b·∫°n s·ªë l∆∞·ª£ng token t∆∞∆°ng ƒë∆∞∆°ng v·ªõi 2 L·∫¶N s·ªë token b·∫°n ƒë√£ BET v·ªõi KOMU. C√≤n n·∫øu b·∫°n thua, b·∫°n s·∫Ω m·∫•t l∆∞·ª£ng token ƒë√≥.`,
              },
              {
                name: 'C∆° h·ªôi cho m·ªçi ng∆∞·ªùi l√† nh∆∞ nhau. C√πng BET th√¥i!',
                value: '',
              },
            ],
            timestamp: new Date().toISOString(),
            footer: MEZON_EMBED_FOOTER,
          },
        ];
        const replyMessage = {
          clan_id: data.clan_id,
          channel_id: process.env.MEZON_BET_CHANNEL_ID || '1840655908913287168',
          is_public: false,
          parent_id: '0',
          mode: EMessageMode.THREAD_MESSAGE,
          msg: {
            t: '',
            embed,
          },
        };
        this.messageQueue.addMessage(replyMessage);
      }

      // event completed
      if (data.event_status === 'COMPLETED') {
        const findEvent = await this.eventMezonRepository.findOne({
          where: {
            id: data.event_id,
            clandId: process.env.KOMUBOTREST_CLAN_NCC_ID,
          },
        });
        if (findEvent) {
          await this.eventMezonRepository.update(
            { id: data.event_id },
            { activeBet: false },
          );
          await this.handleSendToken(data);
        }
      }
    } catch (error) {
      console.log('handleClanEventCreated', error);
    }
  }

  async handleSendToken(data) {
    //find bet win
    const dataBetWin = await this.betEventMezonRepository.find({
      where: {
        eventId: data.event_id,
        amount: MoreThan(0), // payment
        content: 70 + '', // TODO: data usernumber after event finish
        status: IsNull(),
      },
    });

    //send token for winner
    for (let i = 0; i < dataBetWin.length; i++) {
      try {
        const dataSendToken = {
          sender_id: process.env.BOT_KOMU_ID,
          sender_name: 'KOMU',
          receiver_id: dataBetWin[i].userId,
          amount: +dataBetWin[i].amount * 2,
        };
        await this.client.sendToken(dataSendToken);
        // update status
        await this.betEventMezonRepository.update(
          { id: dataBetWin[i].id },
          { status: BetStatus.WIN },
        );
        const messageUser =
          '' +
          `[BET - ${dataBetWin[i].id}]\nüéâYou Won! KOMU just sent ${+dataBetWin[i].amount * 2} token for you. Please check your wallet!` +
          '';
        const messageToUser: ReplyMezonMessage = {
          userId: dataBetWin[i].userId,
          textContent: messageUser,
          messOptions: { mk: [{ type: 'pre', s: 0, e: messageUser.length }] },
        };
        this.messageQueue.addMessage(messageToUser);
      } catch (error) {
        console.log('Send fail idBet ', dataBetWin[i].id, dataBetWin[i].amount);
      }
    }

    // update status
    await this.betEventMezonRepository.update(
      { content: Not('70'), eventId: data.event_id },
      { status: BetStatus.LOSE },
    );

    // total bet
    const resultTotalBet = dataBetWin.reduce((acc, obj) => {
      const existing = acc.find((item) => item.userId === obj.userId);
      if (existing) {
        existing.amount += obj.amount;
      } else {
        acc.push({ ...obj });
      }
      return acc;
    }, []);

    //send message to channel
    let messageText =
      '' +
      `Ting Ting Ting\nEvent ${data.title} finised!\nC√≥ 70 ng∆∞·ªùi tham gia khi event k·∫øt th√∫c!\nDanh s√°ch s·ªë ng∆∞·ªùi d·ª± ƒëo√°n ch√≠nh x√°c\n`;
    const userResults = await Promise.all(
      resultTotalBet.map(async (item) => {
        const findUser = await this.userRepository.findOne({
          where: { userId: item.userId },
        });
        return `${findUser.username} - token earned: ${item.amount}\n`;
      }),
    );
    messageText += userResults.length
      ? userResults.join('')
      : '(kh√¥ng c√≥ ai ƒë√∫ng c·∫£)';
    messageText += '';
    const replyMessage = {
      clan_id: process.env.KOMUBOTREST_CLAN_NCC_ID,
      channel_id: process.env.MEZON_BET_CHANNEL_ID || '1840655908913287168',
      is_public: false,
      parent_id: '0',
      mode: EMessageMode.THREAD_MESSAGE,
      msg: {
        t: messageText,
        mk: [{ type: EMarkdownType.PRE, s: 0, e: messageText.length }],
      },
    };
    this.messageQueue.addMessage(replyMessage);
  }
}
